---
title: "Data Wrangling Refresher"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Data wrangling refresher

1.  Starting from penguins, write a single piped sequence in which you:
    -   Only include penguins at Dream and Biscoe Islands
    -   Remove the year and sex variables
    -   Add a new column body_mass_kg with penguin mass converted from g to kg
    -   Rename the island variable to location

```{r}
# this is how you would write it long form. However! There's an easier way with the filter and %in% functions

# DB_penguins <- penguins %>% filter(island == "Dream"| island == "Biscoe")

# select (-year, -sex) means to delete these columns

# Double equals is a question whether something matches
# One equal is match exactly

# Mutate means to add a new column using existing columns.
# always check after each line, esp for formula conversions

penguins %>% 
  filter(island %in% c("Dream", "Biscoe")) %>% 
  select(-year, -sex) %>% 
  mutate(body_mass_kg = body_mass_g/1000) %>% 
  rename(location = island)
```

Starting from penguins, write a single piped sequence to:

-   limit to Adelie penguins

-   Remove any observations where flipper_length_mm is NA (!is.na()) or drop_na)

    -   Be careful using the drop_na function

    -   !is.na is asking whether it is true that NA is returned

        -   '!' means [do not include]{.underline}

-   Group the data by sex

    -   group_by does not change the dataframe. Just reorganizes it

-   Create a summary table that contains the mean, standard deviation and sample size of flipper lengths for male and female Adelie penguins

```{r}
adelie_summary <- penguins %>% 
  filter(species %in% "Adelie") %>% 
  drop_na(flipper_length_mm) %>% 
  group_by(sex) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm),
            sd_flipper_length = sd(flipper_length_mm),
            sample_size = n())

```

```{r}
penguins %>% 
  group_by(species, island, sex) %>% 
  summarize(sample_size = n())

# Count is just wrapping together group_by + summarize + n() to get counts of observations

penguins %>%  count (species, island, sex)
```

## Datapasta

Make sure to install packages in console, not in the quarto doc. Otherwise it would reinstall each time (install.packages("datapasta")

When you install a new package, you need to restart R. so make sure to save, pull, push

Restart R Studio. Now you have an "Addins" function up top!

WIth this package, you can copy/paste a table from web using the Addins dropdown

```{r}
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE, #this means just read in data as characters
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

## Now we're going to JOIN TABLES!!

### [Full Join]{.underline}

```{r}
full_join_example <- full_join(animals, sites)
```

```{r}
left_join_example <- left_join(animals, sites)
```

```{r}
inner_join_example <- inner_join(animals, sites)
```

## Date & times with lubridate

You HAVE to specify which format the input is in, using the functions below:

-   ymd: if date is in year-month-day

-   mdy: if date is in month-day-year

-   dmy: if date is in day-month-year

```{r}
"03-08-1998"
```

```{r}
my_date_1 <- lubridate::mdy("03-08-1998")

my_date_1
class(my_date_1) 

my_date_2 <- lubridate::mdy("11/7/2003")
class(my_date_2)

my_date_3 <- lubridate::dmy("08-Jun-1974")
my_date_3

my_date_4 <- lubridate::ymd("19740205")
my_date_4
```

Can we break the lubridate parsing functions?

```{r}
my_date_5 <- lubridate::dmy("06-20-2001")

#this will show as an error bc there are no "20" months
```

### Adding times to our dates

You can add "\_hm" to the ymd functions above to include hour and minutes

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
```

Parse June 2, 1982 at 4pm UTC (16:00) as a date in R

```{r}

time_2 <- lubridate::mdy_hm("June 2, 1982 16:00")
time_2

#also!
time_3 <- lubridate::mdy_hm("June 2, 1982 4:00PM")
time_3
```

For Console below:

with_tz is a lubridate function which shows timezone and is part of the tidyverse package (must be loaded at top with library(tidyverse)

note that tidyverse includes 9 core packages. anything beyond that will need to be attached separately.

-   "Sys.time" provides an output based on your computer's current time

```{r}
with_tz(time_2, "America/Los_Angeles")
```

```{r}
with_tz(time_1, "Australia/Sydney")
```

```{r}
now <- with_tz(Sys.time(), "Europe/Belgrade")
now
```

Access different parts of date-times

```{r}
lubridate::week(now)
```

```{r}
lubridate::minute(now)
```

```{r}
lubridate::seconds(now)
```

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004", "October 18, 2007", "Feb 12, 2003", "Feb 14, 2008"),
  species = c("purple", "red", "red", "red"),
  size_mm = c(19, 24, 18, 11)
)
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date= lubridate::mdy(date)) %>% 
  mutate(month= lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarize(mean_size = mean(size_mm))
```

mutating:

mutate() - calls the function to mutate table

mutate(month= ) - this names the new column

mutate(month= lubridate::month(date)) - this call the month only in the date column

## Use str_detect to 

```{r}
my_string <- "Teddy loves salmon and kibble and toys."

str_detect(my_string, pattern = "toys")
```

```{r}
my_string_2 <- c("burrito", "fish taco", "Taco salad", "super-burrito")

str_detect(my_string_2, pattern = "taco")
```

## Star wars example

pipe in the dataset with %\>%, then filter(str_detect(column name, pattern(case-sensitive word you are seaching for, in quotes)

```{r}
starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))
```

```{r}
starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))
#replacement - this replaces the pattern with the provided input
```

### Trimming

-   str_trim to get rid of leading and trailing whitespace

-   str_squish to get rid of leading and trailing whitespace AND excess interior white space

-   str_to_title to convert to title case (uppercases all words)

-   str_to_lower to convert all to lowercase

```{r}
my_string_3 <- "   Hi my name  is teddy !!!  "
```

```{r}
str_trim(my_string_3)
```

```{r}
str_squish(my_string_3)
```

```{r}
str_to_title(my_string_3)
```

```{r}
starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
